{
  "abstract" : [
    {
      "text" : "A LazyGenerator defers the initialization of a generator until a later time. This can be used when generators have state requirements which might cause them to behave in unexpected ways when shared or recreated.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Genything\/documentation\/Genything"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:9Genything13LazyGeneratorV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "LazyGenerator"
      }
    ],
    "modules" : [
      {
        "name" : "Genything"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "LazyGenerator"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "LazyGenerator"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "LazyGenerator"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "G"
            },
            {
              "kind" : "text",
              "text" : "> "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "G"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Generator",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:9Genything9GeneratorP",
              "text" : "Generator"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The wrapped Generator can be safely transformed while retaining the lazy initialization via ",
              "type" : "text"
            },
            {
              "code" : "map(transform:)",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/init(_:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/map(_:)",
        "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/start()"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/genything\/lazygenerator"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Genything/documentation/Genything": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Genything",
  "type" : "topic",
  "url" : "\/documentation\/genything"
},
"doc://Genything/documentation/Genything/Generator": {
  "abstract" : [
    {
      "text" : "Declares that a type can be used to generate an infinite sequence of values of the associatedtype ",
      "type" : "text"
    },
    {
      "code" : "T",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Generator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Generator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Generator"
    }
  ],
  "role" : "symbol",
  "title" : "Generator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/generator"
},
"doc://Genything/documentation/Genything/LazyGenerator": {
  "abstract" : [
    {
      "text" : "A LazyGenerator defers the initialization of a generator until a later time. This can be used when generators have state requirements which might cause them to behave in unexpected ways when shared or recreated.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LazyGenerator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LazyGenerator"
    }
  ],
  "role" : "symbol",
  "title" : "LazyGenerator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/lazygenerator"
},
"doc://Genything/documentation/Genything/LazyGenerator/init(_:)": {
  "abstract" : [
    {
      "text" : "Initializes the DeferredGenerator with a starter factory that produces a Generator when started",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "(() -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "G"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/init(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/genything\/lazygenerator\/init(_:)"
},
"doc://Genything/documentation/Genything/LazyGenerator/map(_:)": {
  "abstract" : [
    {
      "text" : "Returns: A generatable that transforms itâ€™s wrapped generator. The transformations will be deferred until after the Generatable has been started allowing for transformations that can be shared safely.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "map"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "R"
    },
    {
      "kind" : "text",
      "text" : ">(("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "G"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "R"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:9Genything13LazyGeneratorV",
      "text" : "LazyGenerator"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "R"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/map(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "map(_:)",
  "type" : "topic",
  "url" : "\/documentation\/genything\/lazygenerator\/map(_:)"
},
"doc://Genything/documentation/Genything/LazyGenerator/start()": {
  "abstract" : [
    {
      "text" : "Produce a generator using the wrapped factory",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "start"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "G"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator\/start()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "start()",
  "type" : "topic",
  "url" : "\/documentation\/genything\/lazygenerator\/start()"
}
}
}