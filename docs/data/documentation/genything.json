{
  "abstract" : [
    {
      "text" : "",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Genything\/documentation\/Genything"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "Genything",
    "modules" : [
      {
        "name" : "Genything"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "Genything"
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/RandomSource"
      ],
      "title" : "Classes"
    },
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/Arbitrary",
        "doc:\/\/Genything\/documentation\/Genything\/Generator",
        "doc:\/\/Genything\/documentation\/Genything\/RandomInRangeable"
      ],
      "title" : "Protocols"
    },
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/AnyGenerator",
        "doc:\/\/Genything\/documentation\/Genything\/AnyRandomNumberGenerator",
        "doc:\/\/Genything\/documentation\/Genything\/Composer",
        "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator",
        "doc:\/\/Genything\/documentation\/Genything\/RandomizedGenerator",
        "doc:\/\/Genything\/documentation\/Genything\/RandomizedGeneratorSequence"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/Genything\/documentation\/Genything\/Generators"
      ],
      "title" : "Enumerations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/genything"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Genything/documentation/Genything": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Genything",
  "type" : "topic",
  "url" : "\/documentation\/genything"
},
"doc://Genything/documentation/Genything/AnyGenerator": {
  "abstract" : [
    {
      "text" : "A type-erased ",
      "type" : "text"
    },
    {
      "code" : "Generator",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AnyGenerator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/AnyGenerator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AnyGenerator"
    }
  ],
  "role" : "symbol",
  "title" : "AnyGenerator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/anygenerator"
},
"doc://Genything/documentation/Genything/AnyRandomNumberGenerator": {
  "abstract" : [
    {
      "text" : "A type-erased ",
      "type" : "text"
    },
    {
      "code" : "RandomNumberGenerator",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AnyRandomNumberGenerator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/AnyRandomNumberGenerator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AnyRandomNumberGenerator"
    }
  ],
  "role" : "symbol",
  "title" : "AnyRandomNumberGenerator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/anyrandomnumbergenerator"
},
"doc://Genything/documentation/Genything/Arbitrary": {
  "abstract" : [
    {
      "text" : "A type that conforms to the Arbitrary protocol can be used to randomly generate ",
      "type" : "text"
    },
    {
      "inlineContent" : [
        {
          "text" : "any",
          "type" : "text"
        }
      ],
      "type" : "emphasis"
    },
    {
      "text" : " discrete value from the conforming typeâ€™s range of possible values",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Arbitrary"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Arbitrary",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Arbitrary"
    }
  ],
  "role" : "symbol",
  "title" : "Arbitrary",
  "type" : "topic",
  "url" : "\/documentation\/genything\/arbitrary"
},
"doc://Genything/documentation/Genything/Composer": {
  "abstract" : [
    {
      "text" : "The composer class which passes in the randomSource and allows us to generate more complex data with ease",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Composer"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Composer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Composer"
    }
  ],
  "role" : "symbol",
  "title" : "Composer",
  "type" : "topic",
  "url" : "\/documentation\/genything\/composer"
},
"doc://Genything/documentation/Genything/Generator": {
  "abstract" : [
    {
      "text" : "Declares that a type can be used to generate an infinite sequence of values of the associatedtype ",
      "type" : "text"
    },
    {
      "code" : "T",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Generator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Generator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Generator"
    }
  ],
  "role" : "symbol",
  "title" : "Generator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/generator"
},
"doc://Genything/documentation/Genything/Generators": {
  "abstract" : [
    {
      "text" : "A namespace for types that generate",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Generators"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/Generators",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Generators"
    }
  ],
  "role" : "symbol",
  "title" : "Generators",
  "type" : "topic",
  "url" : "\/documentation\/genything\/generators"
},
"doc://Genything/documentation/Genything/LazyGenerator": {
  "abstract" : [
    {
      "text" : "A LazyGenerator defers the initialization of a generator until a later time. This can be used when generators have state requirements which might cause them to behave in unexpected ways when shared or recreated.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "LazyGenerator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/LazyGenerator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "LazyGenerator"
    }
  ],
  "role" : "symbol",
  "title" : "LazyGenerator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/lazygenerator"
},
"doc://Genything/documentation/Genything/RandomInRangeable": {
  "abstract" : [
    {
      "text" : "Indicates a type which can provide random values within a Range",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RandomInRangeable"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/RandomInRangeable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RandomInRangeable"
    }
  ],
  "role" : "symbol",
  "title" : "RandomInRangeable",
  "type" : "topic",
  "url" : "\/documentation\/genything\/randominrangeable"
},
"doc://Genything/documentation/Genything/RandomSource": {
  "abstract" : [
    {
      "text" : "A RandomSource holds a reference to a RandomNumberGenerator. Allowing for a session of deterministic random state to passed around to generators which can be restarted or replayed at any time.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RandomSource"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/RandomSource",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RandomSource"
    }
  ],
  "role" : "symbol",
  "title" : "RandomSource",
  "type" : "topic",
  "url" : "\/documentation\/genything\/randomsource"
},
"doc://Genything/documentation/Genything/RandomizedGenerator": {
  "abstract" : [
    {
      "text" : "A Generator binded together with a RandomSource which has copies of Generator functions which produce values. Used to persist the randomness between multiple generated productions of values.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RandomizedGenerator"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/RandomizedGenerator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RandomizedGenerator"
    }
  ],
  "role" : "symbol",
  "title" : "RandomizedGenerator",
  "type" : "topic",
  "url" : "\/documentation\/genything\/randomizedgenerator"
},
"doc://Genything/documentation/Genything/RandomizedGeneratorSequence": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "RandomizedGenerator",
      "type" : "codeVoice"
    },
    {
      "text" : " wrapped as a ",
      "type" : "text"
    },
    {
      "code" : "Sequence",
      "type" : "codeVoice"
    },
    {
      "text" : " which also acts as itâ€™s own ",
      "type" : "text"
    },
    {
      "code" : "Iterator",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "RandomizedGeneratorSequence"
    }
  ],
  "identifier" : "doc:\/\/Genything\/documentation\/Genything\/RandomizedGeneratorSequence",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "RandomizedGeneratorSequence"
    }
  ],
  "role" : "symbol",
  "title" : "RandomizedGeneratorSequence",
  "type" : "topic",
  "url" : "\/documentation\/genything\/randomizedgeneratorsequence"
}
}
}