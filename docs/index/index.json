{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/genything\/randomsource\/init(using:originalseed:)","title":"init(using: some RandomNumberGenerator, originalSeed: UInt64?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/genything\/randomsource\/maxarbitrarycollectionsize","title":"var maxArbitraryCollectionSize: Int","type":"property"},{"path":"\/documentation\/genything\/randomsource\/maxrecursivearbitrarycollectionsize","title":"var maxRecursiveArbitraryCollectionSize: Int","type":"property"},{"path":"\/documentation\/genything\/randomsource\/originalseed","title":"let originalSeed: UInt64?","type":"property"},{"path":"\/documentation\/genything\/randomsource\/rng","title":"var rng: RandomNumberGenerator","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randomsource\/dropfirst(_:)","title":"func dropFirst(Int) -> RandomSource","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/genything\/randomsource\/system","title":"static var system: RandomSource","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randomsource\/predetermined(seed:)","title":"static func predetermined(seed: UInt64) -> RandomSource","type":"method"},{"path":"\/documentation\/genything\/randomsource\/random()","title":"static func random() -> RandomSource","type":"method"},{"path":"\/documentation\/genything\/randomsource\/replay(seed:)","title":"static func replay(seed: UInt64) -> RandomSource","type":"method"}],"path":"\/documentation\/genything\/randomsource","title":"RandomSource","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/genything\/arbitrary\/arbitrary","title":"static var arbitrary: AnyGenerator<Self>","type":"property"}],"path":"\/documentation\/genything\/arbitrary","title":"Arbitrary","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/genything\/generator\/t","title":"T","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/generator\/also(_:)","title":"func also((Self.T) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/debug(_:file:line:)","title":"func debug(String, file: StaticString, line: UInt) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/distinct(memorysize:)","title":"func distinct(memorySize: Int?) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/dropfirst(_:)","title":"func dropFirst(Int) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/erasetoanygenerator()","title":"func eraseToAnyGenerator() -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/expand(tosize:)","title":"func expand(toSize: Int) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/generator\/expand(tosizeinrange:)-2uhg0","title":"func expand(toSizeInRange: Range<Int>) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/generator\/expand(tosizeinrange:)-33rxh","title":"func expand(toSizeInRange: ClosedRange<Int>) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/generator\/filter(_:)","title":"func filter((Self.T) -> Bool) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/flatmap(_:)","title":"func flatMap<G>((Self.T) -> G) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/flatten()-5fvj6","title":"func flatten() -> AnyGenerator<Self.T.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/flatten()-92f7z","title":"func flatten() -> AnyGenerator<Self.T.Element>","type":"method"},{"path":"\/documentation\/genything\/generator\/generate(_:)","title":"func generate((RandomSource) -> Self.T) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/map(_:)","title":"func map<R>((Self.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/next(_:)","title":"func next(RandomSource) -> Self.T","type":"method"},{"path":"\/documentation\/genything\/generator\/or(_:otherprobability:)","title":"func or<Other>(Other, otherProbability: Double) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/ornil(nilprobability:)","title":"func orNil(nilProbability: Double) -> AnyGenerator<Self.T?>","type":"method"},{"path":"\/documentation\/genything\/generator\/prepend(_:)","title":"func prepend<S>(S) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/randomize(with:)","title":"func randomize(with: RandomSource) -> RandomizedGenerator<Self>","type":"method"},{"path":"\/documentation\/genything\/generator\/recompose(_:)","title":"func recompose((inout Self.T, Composer) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/regenerate(_:)","title":"func regenerate((inout Self.T, RandomSource) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/removeduplicates()","title":"func removeDuplicates() -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/replacenil(with:)","title":"func replaceNil<R>(with: R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/replacingoccurrences(of:in:)","title":"func replacingOccurrences(of: String, in: String) -> AnyGenerator<String>","type":"method"},{"path":"\/documentation\/genything\/generator\/scan(_:_:)","title":"func scan<R>(R, (R, Self.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/sequence(_:randomsource:)","title":"func sequence(Int, randomSource: RandomSource) -> AnySequence<Self.T>","type":"method"},{"path":"\/documentation\/genything\/generator\/sequence(randomsource:)","title":"func sequence(randomSource: RandomSource) -> RandomizedGeneratorSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/generator\/take(_:randomsource:)","title":"func take(Int, randomSource: RandomSource) -> [Self.T]","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:)","title":"func zip<B>(B) -> AnyGenerator<(Self.T, B.T)>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:)","title":"func zip<B, C>(B, C) -> AnyGenerator<(Self.T, B.T, C.T)>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:_:)","title":"func zip<B, C, D>(B, C, D) -> AnyGenerator<(Self.T, B.T, C.T, D.T)>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:_:_:)","title":"func zip<B, C, D, E>(B, C, D, E) -> AnyGenerator<(Self.T, B.T, C.T, D.T, E.T)>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:_:_:transform:)","title":"func zip<B, C, D, E, R>(B, C, D, E, transform: (Self.T, B.T, C.T, D.T, E.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:_:transform:)","title":"func zip<B, C, D, R>(B, C, D, transform: (Self.T, B.T, C.T, D.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:_:transform:)","title":"func zip<B, C, R>(B, C, transform: (Self.T, B.T, C.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generator\/zip(_:transform:)","title":"func zip<B, R>(B, transform: (Self.T, B.T) -> R) -> AnyGenerator<R>","type":"method"}],"path":"\/documentation\/genything\/generator","title":"Generator","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randominrangeable\/random(in:using:)-15i99","title":"static func random<RNG>(in: ClosedRange<Self>, using: inout RNG) -> Self","type":"method"},{"path":"\/documentation\/genything\/randominrangeable\/random(in:using:)-48awx","title":"static func random<RNG>(in: Range<Self>, using: inout RNG) -> Self","type":"method"}],"path":"\/documentation\/genything\/randominrangeable","title":"RandomInRangeable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/genything\/anygenerator\/init(_:)-33z2v","title":"init((RandomSource) -> T)","type":"init"},{"path":"\/documentation\/genything\/anygenerator\/init(_:)-489t","title":"init<G>(G)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/anygenerator\/next(_:)","title":"func next(RandomSource) -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/anygenerator\/also(_:)","title":"func also((Self.T) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/debug(_:file:line:)","title":"func debug(String, file: StaticString, line: UInt) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/distinct(memorysize:)","title":"func distinct(memorySize: Int?) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/dropfirst(_:)","title":"func dropFirst(Int) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/erasetoanygenerator()","title":"func eraseToAnyGenerator() -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/expand(tosize:)","title":"func expand(toSize: Int) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/expand(tosizeinrange:)-7qk5n","title":"func expand(toSizeInRange: Range<Int>) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/expand(tosizeinrange:)-8i0w0","title":"func expand(toSizeInRange: ClosedRange<Int>) -> AnyGenerator<[Self.T]>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/filter(_:)","title":"func filter((Self.T) -> Bool) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/flatmap(_:)","title":"func flatMap<G>((Self.T) -> G) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/flatten()-6zacx","title":"func flatten() -> AnyGenerator<Self.T.Element>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/flatten()-73gq7","title":"func flatten() -> AnyGenerator<Self.T.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/generate(_:)","title":"func generate((RandomSource) -> Self.T) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/map(_:)","title":"func map<R>((Self.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/or(_:otherprobability:)","title":"func or<Other>(Other, otherProbability: Double) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/ornil(nilprobability:)","title":"func orNil(nilProbability: Double) -> AnyGenerator<Self.T?>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/prepend(_:)","title":"func prepend<S>(S) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/randomize(with:)","title":"func randomize(with: RandomSource) -> RandomizedGenerator<Self>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/recompose(_:)","title":"func recompose((inout Self.T, Composer) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/regenerate(_:)","title":"func regenerate((inout Self.T, RandomSource) -> Void) -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/removeduplicates()","title":"func removeDuplicates() -> AnyGenerator<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/replacenil(with:)","title":"func replaceNil<R>(with: R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/replacingoccurrences(of:in:)","title":"func replacingOccurrences(of: String, in: String) -> AnyGenerator<String>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/scan(_:_:)","title":"func scan<R>(R, (R, Self.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/sequence(_:randomsource:)","title":"func sequence(Int, randomSource: RandomSource) -> AnySequence<Self.T>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/sequence(randomsource:)","title":"func sequence(randomSource: RandomSource) -> RandomizedGeneratorSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/take(_:randomsource:)","title":"func take(Int, randomSource: RandomSource) -> [Self.T]","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:)","title":"func zip<B>(B) -> AnyGenerator<(Self.T, B.T)>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:)","title":"func zip<B, C>(B, C) -> AnyGenerator<(Self.T, B.T, C.T)>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:_:)","title":"func zip<B, C, D>(B, C, D) -> AnyGenerator<(Self.T, B.T, C.T, D.T)>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:_:_:)","title":"func zip<B, C, D, E>(B, C, D, E) -> AnyGenerator<(Self.T, B.T, C.T, D.T, E.T)>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:_:_:transform:)","title":"func zip<B, C, D, E, R>(B, C, D, E, transform: (Self.T, B.T, C.T, D.T, E.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:_:transform:)","title":"func zip<B, C, D, R>(B, C, D, transform: (Self.T, B.T, C.T, D.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:_:transform:)","title":"func zip<B, C, R>(B, C, transform: (Self.T, B.T, C.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/anygenerator\/zip(_:transform:)","title":"func zip<B, R>(B, transform: (Self.T, B.T) -> R) -> AnyGenerator<R>","type":"method"}],"path":"\/documentation\/genything\/anygenerator\/generator-implementations","title":"Generator Implementations","type":"symbol"}],"path":"\/documentation\/genything\/anygenerator","title":"AnyGenerator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/composer\/arbitrary()","title":"func arbitrary<T>() -> T","type":"method"},{"path":"\/documentation\/genything\/composer\/arbitrarycase()","title":"func arbitraryCase<T>() -> T","type":"method"},{"path":"\/documentation\/genything\/composer\/callasfunction()-3p35","title":"func callAsFunction<T>() -> T","type":"method"},{"path":"\/documentation\/genything\/composer\/callasfunction()-65q96","title":"func callAsFunction<T>() -> T","type":"method"},{"path":"\/documentation\/genything\/composer\/callasfunction(_:)","title":"func callAsFunction<G>(G) -> G.T","type":"method"},{"path":"\/documentation\/genything\/composer\/generate(_:)","title":"func generate<G>(G) -> G.T","type":"method"}],"path":"\/documentation\/genything\/composer","title":"Composer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/genything\/lazygenerator\/init(_:)","title":"init(() -> G)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/lazygenerator\/map(_:)","title":"func map<R>((G) -> R) -> LazyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/lazygenerator\/start()","title":"func start() -> G","type":"method"}],"path":"\/documentation\/genything\/lazygenerator","title":"LazyGenerator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgenerator\/init(_:randomsource:)","title":"init(G, randomSource: RandomSource)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgenerator\/map(_:)","title":"func map<R>((G) -> R) -> RandomizedGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/randomizedgenerator\/next()","title":"func next() -> G.T","type":"method"},{"path":"\/documentation\/genything\/randomizedgenerator\/sequence()","title":"func sequence() -> RandomizedGeneratorSequence<G>","type":"method"},{"path":"\/documentation\/genything\/randomizedgenerator\/sequence(_:)","title":"func sequence(Int) -> AnySequence<G.T>","type":"method"},{"path":"\/documentation\/genything\/randomizedgenerator\/take(_:)","title":"func take(Int) -> [G.T]","type":"method"}],"path":"\/documentation\/genything\/randomizedgenerator","title":"RandomizedGenerator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/init(_:)","title":"init(RandomizedGenerator<G>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/next()","title":"func next() -> G.T?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/flatmap(_:)-15vya","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/flatmap(_:)-4cad0","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/joined(separator:)-3xcks","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/joined(separator:)-5ch32","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/sorted(using:)-8bho8","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/sorted(using:)-9ogt6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/genything\/randomizedgeneratorsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/genything\/randomizedgeneratorsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/genything\/randomizedgeneratorsequence","title":"RandomizedGeneratorSequence","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/genything\/generators\/collect(_:)-57uuk","title":"static func collect<G>(G...) -> AnyGenerator<[G.T]>","type":"method"},{"path":"\/documentation\/genything\/generators\/collect(_:)-8ant5","title":"static func collect<G>([G]) -> AnyGenerator<[G.T]>","type":"method"},{"path":"\/documentation\/genything\/generators\/collect(_:transform:)-96r8f","title":"static func collect<G, R>([G], transform: (G.T) -> R) -> AnyGenerator<[R]>","type":"method"},{"path":"\/documentation\/genything\/generators\/collect(_:transform:)-9kr96","title":"static func collect<G, R>(G..., transform: (G.T) -> R) -> AnyGenerator<[R]>","type":"method"},{"path":"\/documentation\/genything\/generators\/compose(_:)","title":"static func compose<T>((Composer) -> T) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/constant(_:)","title":"static func constant<T>(T) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/either(left:right:rightprobability:)","title":"static func either<G1, G2>(left: G1, right: G2, rightProbability: Double) -> AnyGenerator<G1.T>","type":"method"},{"path":"\/documentation\/genything\/generators\/iterate(_:)-2ixeh","title":"static func iterate<Elements>(Elements) -> AnyGenerator<Elements.Element?>","type":"method"},{"path":"\/documentation\/genything\/generators\/iterate(_:)-472d8","title":"static func iterate<T>(T...) -> AnyGenerator<T?>","type":"method"},{"path":"\/documentation\/genything\/generators\/join(_:separator:)","title":"static func join<G>([G], separator: String) -> AnyGenerator<String>","type":"method"},{"path":"\/documentation\/genything\/generators\/loop(_:)-3drb7","title":"static func loop<T>(T...) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/loop(_:)-4mmsh","title":"static func loop<Elements>(Elements) -> AnyGenerator<Elements.Element>","type":"method"},{"path":"\/documentation\/genything\/generators\/merge(_:)-2kr3a","title":"static func merge<G>(G...) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/generators\/merge(_:)-8h853","title":"static func merge<G>([G]) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/generators\/one(of:)-1kxbw","title":"static func one<G>(of: G...) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/generators\/one(of:)-6mstu","title":"static func one<G>(of: [G]) -> AnyGenerator<G.T>","type":"method"},{"path":"\/documentation\/genything\/generators\/reduce(_:_:_:)","title":"static func reduce<G, R>([G], R, (R, G.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generators\/replacing(_:with:)","title":"static func replacing<G>(String, with: [(replace: String, by: G)]) -> AnyGenerator<String>","type":"method"},{"path":"\/documentation\/genything\/generators\/shuffleloop(_:)-18k26","title":"static func shuffleLoop<Elements>(Elements) -> AnyGenerator<Elements.Element>","type":"method"},{"path":"\/documentation\/genything\/generators\/shuffleloop(_:)-855wb","title":"static func shuffleLoop<T>(T...) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/shuffled(_:)-5bfny","title":"static func shuffled<T>([T]) -> AnyGenerator<[T]>","type":"method"},{"path":"\/documentation\/genything\/generators\/shuffled(_:)-69yxn","title":"static func shuffled<T>(T...) -> AnyGenerator<[T]>","type":"method"},{"path":"\/documentation\/genything\/generators\/void()","title":"static func void() -> AnyGenerator<()>","type":"method"},{"path":"\/documentation\/genything\/generators\/weighted(_:)-69on3","title":"static func weighted<T>([(weight: Int, generator: AnyGenerator<T>)]) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/weighted(_:)-6r20z","title":"static func weighted<T>([(Int, T)]) -> AnyGenerator<T>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:)","title":"static func zip<A, B>(A, B) -> AnyGenerator<(A.T, B.T)>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:_:)","title":"static func zip<A, B, C>(A, B, C) -> AnyGenerator<(A.T, B.T, C.T)>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:_:_:)","title":"static func zip<A, B, C, D>(A, B, C, D) -> AnyGenerator<(A.T, B.T, C.T, D.T)>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:_:_:transform:)","title":"static func zip<A, B, C, D, R>(A, B, C, D, transform: (A.T, B.T, C.T, D.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:_:transform:)","title":"static func zip<A, B, C, R>(A, B, C, transform: (A.T, B.T, C.T) -> R) -> AnyGenerator<R>","type":"method"},{"path":"\/documentation\/genything\/generators\/zip(_:_:transform:)","title":"static func zip<A, B, R>(A, B, transform: (A.T, B.T) -> R) -> AnyGenerator<R>","type":"method"}],"path":"\/documentation\/genything\/generators","title":"Generators","type":"enum"}],"path":"\/documentation\/genything","title":"Genything","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}